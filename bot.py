import random
import telebot
from telebot import types
import config
import os
import json
from datetime import datetime

bot = telebot.TeleBot(config.TOKEN, parse_mode=None)

LIST_OF_POPULAR_COUNTRIES = ['üáπüá≠ –¢–∞–π–ª–∞–Ω–¥', 'üáπüá∑ –¢—É—Ä—Ü–∏—è', 'üáÆüá≥ –ò–Ω–¥–∏—è', 'üáØüáµ –Ø–ø–æ–Ω–∏—è', 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è', 'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è',
                             'üáÆüáπ –ò—Ç–∞–ª–∏—è',
                             'üá®üá≥ –ö–∏—Ç–∞–π', 'üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞', 'üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏—è']

DICT_OF_POPULAR_COUNTRIES = {'–¢–∞–π–ª–∞–Ω–¥': '–¢–∞–π—Å–∫–∞—è', '–¢—É—Ä—Ü–∏—è': '–¢—É—Ä–µ—Ü–∫–∞—è', '–ò–Ω–¥–∏—è': '–ò–Ω–¥–∏–π—Å–∫–∞—è', '–Ø–ø–æ–Ω–∏—è': '–Ø–ø–æ–Ω—Å–∫–∞—è',
                             '–§—Ä–∞–Ω—Ü–∏—è': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è', '–ò—Å–ø–∞–Ω–∏—è': '–ò—Å–ø–∞–Ω—Å–∫–∞—è', '–ò—Ç–∞–ª–∏—è': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è',
                             '–ö–∏—Ç–∞–π': '–ö–∏—Ç–∞–π—Å–∫–∞—è', '–ú–µ–∫—Å–∏–∫–∞': '–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è', '–ò–Ω–¥–æ–Ω–µ–∑–∏—è': '–ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∞—è'}

LIST_OF_CATEGORIES = ['ü•ê –í—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ã', 'üç≤ –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞', 'üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏', 'ü•ó –°–∞–ª–∞—Ç—ã', 'ü•£ –°—É–ø—ã',
                      'üçù –ü–∞—Å—Ç–∞ –∏ –ø–∏—Ü—Ü–∞', 'ü•™ –°—ç–Ω–¥–≤–∏—á–∏', 'ü•§ –ù–∞–ø–∏—Ç–∫–∏']

ACTIVITY_LEVELS = {'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å': 1.2, '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å': 1.375, '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å': 1.55,
                   '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å': 1.725, '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π': 1.9}

now = datetime.now()
dict_of_users_category = {}
dict_of_users_kitchen = {}
dict_of_last_dish_users = {}
dict_users_last_list_of_dishes = {}
dict_of_users_ingredients = {}


def main():
    global dict_of_users_param
    dict_of_users_param = {}
    if os.path.exists('users_param.json'):
        with open('users_param.json', 'r', encoding='utf-8') as file:
            if os.stat('users_param.json').st_size:
                dict_of_users_param = json.load(file)
                for k, v in dict_of_users_param.items():
                    print(k)
                    print(v)


if __name__ == "__main__":
    main()


@bot.message_handler(commands=['start'])
def start(message):
    check_users_activity(message.chat.id)
    stic = open('stic/hello.webp', 'rb')
    bot.send_message(message.chat.id, "{0.first_name}, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –®–µ—Ñ-–ü–æ–≤–∞—Ä üë®‚Äçüç≥".format(message.from_user))
    bot.send_sticker(message.chat.id, stic)
    bot.send_message(message.chat.id, "–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help")


@bot.message_handler(commands=['help'])
def help(message):
    check_users_activity(message.chat.id)
    bot.send_message(message.chat.id, '–£ –±–æ—Ç–∞ –µ—Å—Ç—å –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n\t<b>1. –ì–æ—Ç–æ–≤–∫–∞ –±–ª—é–¥</b> ü•ò\n‚ûî\t–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ '
                                      '–Ω–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ '
                                      '—Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è.\n\n\t<b>2. –î–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π</b> '
                                      'üìñ\n‚ûî\t–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –Ω–æ—Ä–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–∞—à–∏—Ö '
                                      '–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –±–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤–∞—à—É –Ω–æ—Ä–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π.\n\n\t<b>3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ '
                                      '–¥–Ω–µ–≤–Ω–∏–∫–∞</b> üìù\n‚ûî\t–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ '
                                      '–æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π, –∏–∑–º–µ–Ω–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞.',
                     reply_markup=return_markup_for_help(), parse_mode="html")


@bot.message_handler(content_types=['text'])
def bot_message(message):
    check_users_activity(message.chat.id)
    if message.text == 'ü•ò –ì–æ—Ç–æ–≤–∫–∞ –±–ª—é–¥':
        bot.send_message(message.chat.id,
                         '–ì–æ—Ç–æ–≤–∫–∞ –±–ª—é–¥ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n\t<b>1. –ü–æ–∏—Å–∫ –±–ª—é–¥–∞</b> üç¥\n‚ûî\t–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ '
                         '–Ω–∞–π—Ç–∏ –ª—é–±–æ–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞—Ö–æ—Ç–∏—Ç–µ.\n\n\t<b>2. –ö—É—Ö–Ω–∏ –º–∏—Ä–∞</b> '
                         'üó∫\n‚ûî\t–¢—É—Ç –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 10 '
                         '–ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ö–æ–Ω—å –º–∏—Ä–∞. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ö–Ω–∏: \n–ù–∞–ø—Ä–∏–º–µ—Ä: '
                         '"–†—É—Å—Å–∫–∞—è"\n\n\t<b>3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥</b> üç≥\n‚ûî\t–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ '
                         '–Ω–∞–π—Ç–∏ –±–ª—é–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤—Ç—Ä–∞–∫\n\n\t<b>4. –ü–æ–∏—Å–∫ –ø–æ '
                         '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º</b> üßÑ\n‚ûî\t–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∏ –±–æ—Ç –ø–æ–¥–±–µ—Ä–µ—Ç '
                         '–¥–ª—è –≤–∞—Å –±–ª—é–¥–æ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –Ω–∏—Ö',
                         reply_markup=return_markup_for_cooking(),
                         parse_mode='html')

    elif message.text == 'üó∫ –ö—É—Ö–Ω–∏ –º–∏—Ä–∞':
        bot.send_message(message.chat.id, '‚ùó –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –∫—É—Ö–Ω—é, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –†—É—Å—Å–∫–∞—è')
        bot.send_message(message.chat.id, 'üó∫ 10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ö–æ–Ω—å –º–∏—Ä–∞',
                         reply_markup=return_markup_for_kitchens_wolrd(),
                         parse_mode='html')
        dict_of_users_category[str(message.chat.id)] = ''

    elif message.text == 'üç≥ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥':
        bot.send_message(message.chat.id, 'üç≥ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥', reply_markup=return_markup_for_categories(),
                         parse_mode='html')
        dict_of_users_kitchen[str(message.chat.id)] = ''

    elif message.text == 'üç¥ –ü–æ–∏—Å–∫ –±–ª—é–¥–∞':
        bot.send_message(message.chat.id, 'üîç –í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –±–ª–∏–Ω—ã')

    elif message.text == 'üßÑ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º':
        msg = bot.send_message(message.chat.id, 'üñä –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —á–µ—Å–Ω–æ–∫, —Å–æ–ª—å')

        dict_of_users_ingredients[str(message.chat.id)] = []
        bot.register_next_step_handler(msg, add_ingredient)

    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=return_markup_for_help())

    elif message.text == 'üîô –ùa–∑a–¥':
        bot.send_message(message.chat.id, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
                         reply_markup=return_markup_for_cooking())

    elif message.text == 'üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π':
        dict_of_users_kitchen[str(message.chat.id)] = ''
        dict_of_users_category[str(message.chat.id)] = ''
        bot.send_message(message.chat.id, 'üç≥ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥', reply_markup=return_markup_for_categories(),
                         parse_mode='html')

    elif message.text == 'üîô –ö –≤—ã–±–æ—Ä—É –∫—É—Ö–æ–Ω—å':
        dict_of_users_category[str(message.chat.id)] = ''
        dict_of_users_kitchen[str(message.chat.id)] = ''
        bot.send_message(message.chat.id, 'üó∫ 10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ö–æ–Ω—å –º–∏—Ä–∞',
                         reply_markup=return_markup_for_kitchens_wolrd(),
                         parse_mode='html')


    elif message.text in LIST_OF_CATEGORIES:
        category = message.text[2:]
        markup_dishes_of_the_selected_country_dishes = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                                                 resize_keyboard=True)
        markup_for_copy = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥'))

        dict_of_users_category[str(message.chat.id)] = category
        dict_of_users_kitchen[str(message.chat.id)] = ''
        list_of_categories = os.listdir('categories_cuisine')
        limit = 0
        find_it = False

        for category_cuisine in list_of_categories:
            if category == category_cuisine[0:len(category_cuisine) - 5]:
                find_it = True
                with open(f'categories_cuisine/{category}.json', 'r', encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json) - 1):
                    limit += 1
                    random_dish = random.randint(0, len(text_json) - 1)
                    markup_dishes_of_the_selected_country_dishes.add(
                        types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                    markup_for_copy.add(
                        types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                    if limit > 120:
                        break
            if find_it == True:
                break

        markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π'))
        markup_for_copy.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π'))
        dict_users_last_list_of_dishes[str(message.chat.id)] = markup_for_copy
        bot.send_message(message.chat.id, 'ü•ò –ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–µ –±–ª—é–¥–∞',
                         reply_markup=markup_dishes_of_the_selected_country_dishes)

    elif message.text in LIST_OF_POPULAR_COUNTRIES:
        country_for_dict = message.text[3:]
        country = DICT_OF_POPULAR_COUNTRIES.get(country_for_dict)
        markup_dishes_of_the_selected_country_dishes = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                                                 resize_keyboard=True)
        markup_for_copy = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥'))
        list_of_countries = os.listdir('countries_cuisine')
        limit = 0
        find_it = False
        dict_of_users_kitchen[str(message.chat.id)] = country
        for country_couisine in list_of_countries:
            if country == country_couisine[0:len(country_couisine) - 5]:
                find_it = True
                with open(f'countries_cuisine/{country}.json', 'r', encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json) - 1):
                    limit += 1
                    random_dish = random.randint(0, len(text_json) - 1)
                    markup_dishes_of_the_selected_country_dishes.add(
                        types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                    markup_for_copy.add(
                        types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                    if limit > 120:
                        break
            if find_it == True:
                break

        markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫—É—Ö–æ–Ω—å'))
        markup_for_copy.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫—É—Ö–æ–Ω—å'))

        dict_users_last_list_of_dishes[str(message.chat.id)] = markup_for_copy
        bot.send_message(message.chat.id, 'ü•ò –ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–µ –±–ª—é–¥–∞',
                         reply_markup=markup_dishes_of_the_selected_country_dishes)
        dict_of_users_category[str(message.chat.id)] = ''

    elif message.text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥':
        markup_dishes_of_the_selected_country_dishes = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                                                 resize_keyboard=True)
        markup_for_copy = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥'))
        if dict_of_users_kitchen[str(message.chat.id)] != '':
            list_of_countries = os.listdir('countries_cuisine')
            limit = 0
            find_it = False
            for country_couisine in list_of_countries:
                if dict_of_users_kitchen[str(message.chat.id)] == country_couisine[0:len(country_couisine) - 5]:
                    find_it = True
                    with open(f'countries_cuisine/{dict_of_users_kitchen.get(str(message.chat.id))}.json', 'r',
                              encoding='utf-8') as f:
                        text_json = json.load(f)

                    for count_of_dishes in range(len(text_json) - 1):
                        limit += 1
                        random_dish = random.randint(0, len(text_json) - 1)
                        markup_dishes_of_the_selected_country_dishes.add(
                            types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                        markup_for_copy.add(
                            types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                        if limit > 120:
                            break
                if find_it == True:
                    break

            markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫—É—Ö–æ–Ω—å'))
            markup_for_copy.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫—É—Ö–æ–Ω—å'))
            dict_users_last_list_of_dishes[str(message.chat.id)] = markup_for_copy

            bot.send_message(message.chat.id, 'üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –±–ª—é–¥...',
                             reply_markup=markup_dishes_of_the_selected_country_dishes)

        elif dict_of_users_category[str(message.chat.id)] != '':
            list_of_categories = os.listdir('categories_cuisine')
            limit = 0
            find_it = False
            for categori_couisine in list_of_categories:
                if dict_of_users_category[str(message.chat.id)] == categori_couisine[0:len(categori_couisine) - 5]:
                    find_it = True
                    with open(f'categories_cuisine/{dict_of_users_category.get(str(message.chat.id))}.json', 'r',
                              encoding='utf-8') as f:
                        text_json = json.load(f)

                    for count_of_dishes in range(len(text_json) - 1):
                        limit += 1
                        random_dish = random.randint(0, len(text_json) - 1)
                        markup_dishes_of_the_selected_country_dishes.add(
                            types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                        markup_for_copy.add(
                            types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                        if limit > 120:
                            break
                if find_it == True:
                    break

            markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π'))
            markup_for_copy.add(types.KeyboardButton('üîô –ö –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π'))
            dict_users_last_list_of_dishes[str(message.chat.id)] = markup_for_copy
            bot.send_message(message.chat.id, 'üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –±–ª—é–¥...',
                             reply_markup=markup_dishes_of_the_selected_country_dishes)

    elif message.text == 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–ª—é–¥':
        markup = dict_users_last_list_of_dishes[str(message.chat.id)]
        bot.send_message(message.chat.id, 'üìÉ –°–ø–∏—Å–æ–∫ –±–ª—é–¥:', reply_markup=markup)

    elif message.text[:2] == 'üçΩ ':
        if message.chat.id in dict_of_last_dish_users:
            pass
        else:
            dict_of_last_dish_users[message.chat.id] = 0

        dish = message.text[2:]
        dir_name = 'countries_cuisine'
        countries = os.listdir(dir_name)
        categories = os.listdir('categories_cuisine')
        found_dish = False
        if (message.chat.id in dict_of_users_kitchen) or (message.chat.id in dict_of_users_category):
            if dict_of_users_kitchen[str(message.chat.id)] != '':
                with open(f'countries_cuisine/{dict_of_users_kitchen.get(str(message.chat.id))}.json', 'r',
                          encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json)):
                    if text_json[count_of_dishes]['name'] == dish:
                        break
            if dict_of_users_category[str(message.chat.id)] != '':
                with open(f'categories_cuisine/{dict_of_users_category.get(str(message.chat.id))}.json', 'r',
                          encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json)):
                    if text_json[count_of_dishes]['name'] == dish:
                        break
        else:
            for country in countries:
                with open(f'countries_cuisine/{country}', 'r', encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json)):
                    if text_json[count_of_dishes]['name'] == dish:
                        found_dish = True
                        break
                if found_dish:
                    break
            if found_dish == False:
                for category in categories:
                    with open(f'categories_cuisine/{category}', 'r', encoding='utf-8') as f:
                        text_json = json.load(f)

                    for count_of_dishes in range(len(text_json)):
                        if text_json[count_of_dishes]['name'] == dish:
                            found_dish = True
                            break
                    if found_dish:
                        break

        if text_json[count_of_dishes]['cook_time'] != 0:
            cook_time = "<b>2. –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∏ –∫–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π</b> üïñ\n‚ûî " + text_json[count_of_dishes][
                'cook_time'] + "\n‚ûî " + str(text_json[count_of_dishes]['servings_count']) + " –ø–æ—Ä—Ü–∏–∏"
        ingredients = text_json[count_of_dishes]['ingredients']
        list_of_cooking_instuction = text_json[count_of_dishes]['cooking_instructions']
        calories = text_json[count_of_dishes]['calories']
        protein = text_json[count_of_dishes]['protein']
        fat = text_json[count_of_dishes]['fat']
        carbohydrate = text_json[count_of_dishes]['carbohydrate']
        text_for_cooking_instruction = '<b>3. –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</b> üë£\n'
        text_for_ingredients = '<b>1. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</b> üßÇ\n'

        dict_of_last_dish_users[message.chat.id] = int(calories)

        for steps in list_of_cooking_instuction:
            text_for_cooking_instruction += '‚ûî\t' + steps
            text_for_cooking_instruction += '\n'

        for step, ingredient in enumerate(ingredients):
            text_for_ingredients += '‚ûî\t' + ingredient[0] + ': ' + ingredient[1] + '\n'

        text_about_calories = '<b>4. –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å</b> üìÑ\n‚ûî\t' + str(calories) + ' –∫–∫–∞–ª\n‚ûî\t' + \
                              str(protein) + ' –±–µ–ª–∫–æ–≤\n‚ûî' \
                                             '\t' + \
                              str(fat) + ' –∂–∏—Ä–æ–≤\n‚ûî\t' + str(carbohydrate) + ' —É–≥–ª–µ–≤–æ–¥–æ–≤'

        markup_for_add_at_diary = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup_for_add_at_diary.add(types.KeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–ª—é–¥'))
        bot.send_message(message.chat.id, text_for_ingredients, parse_mode='html')
        bot.send_message(message.chat.id, cook_time, parse_mode='html')
        bot.send_message(message.chat.id, text_for_cooking_instruction, parse_mode='html')
        bot.send_message(message.chat.id, text_about_calories, parse_mode='html', reply_markup=markup_for_add_at_diary)
        dict_of_users_category[str(message.chat.id)] = ''
        dict_of_users_kitchen[str(message.chat.id)] = ''

    elif message.text == 'üìñ –î–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π':
        if str(message.chat.id) in dict_of_users_param:
            markup_for_add_calories = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup_for_add_calories.add(types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏'),
                                        types.KeyboardButton('–û–±–Ω—É–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏'), types.KeyboardButton('üîô –ù–∞–∑–∞–¥'))
            basal_metabolism_for_send = f'<b>{dict_of_users_param.get(str(message.chat.id))[5]} –∫–∫–∞–ª/—Å—É—Ç–∫–∏</b>. –≠—Ç–æ –≤–∞—à <b>–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º</b> (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω). –≠—Ç–æ –∫–∞–ª–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∂–∏–≥–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∫–æ–µ, –∏ —ç–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥—ã—Ö–∞–Ω–∏—è, –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ –∏ —Ç.–¥.'
            normal_calories_for_send = f'<b>{dict_of_users_param.get(str(message.chat.id))[6]} –∫–∫–∞–ª/—Å—É—Ç–∫–∏</b>. –í–∞—à–∞ <b>–Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π</b> –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ —Å —Ç–µ–∫—É—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã –Ω–µ —Ö—É–¥–µ–µ—Ç–µ –∏ –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –≤–µ—Å)'
            bot.send_message(message.chat.id, basal_metabolism_for_send, parse_mode='html')
            bot.send_message(message.chat.id, normal_calories_for_send, parse_mode='html')
        else:
            markup_gender = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup_gender.add(types.KeyboardButton('üôã‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π'), types.KeyboardButton('üôã‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π'))

            msg = bot.send_message(message.chat.id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –≤–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π, –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ '
                                                    '–¥–∞–Ω–Ω—ã–µ.\n–í–∞—à –ø–æ–ª:', reply_markup=markup_gender)
            bot.register_next_step_handler(msg, user_gender)

    elif message.text == 'üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞':
        markup_gender = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        markup_gender.add(types.KeyboardButton('üôã‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π'), types.KeyboardButton('üôã‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π'))

        msg = bot.send_message(message.chat.id, '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å –≤–∞—à—É –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π, –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ '
                                                '–¥–∞–Ω–Ω—ã–µ.\n–í–∞—à –ø–æ–ª:', reply_markup=markup_gender)
        bot.register_next_step_handler(msg, user_gender)

    else:
        #TODO –°–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–¥–æ–º –±–ª—é–¥
        list_of_countries = os.listdir('countries_cuisine')
        find_it = False
        user_input = message.text.lower()
        user_input = user_input[0].upper() + user_input[1:]
        for country_couisine in list_of_countries:
            if user_input == country_couisine[0:len(country_couisine) - 5]:
                find_it = True

        if find_it == True:
            markup_dishes_of_the_selected_country_dishes = types.ReplyKeyboardMarkup(one_time_keyboard=True,
                                                                                     resize_keyboard=True)
            markup_for_copy = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥'))
            dict_of_users_kitchen[str(message.chat.id)] = user_input
            dict_of_users_category[str(message.chat.id)] = ''
            limit = 0

            with open(f'countries_cuisine/{user_input}.json', 'r', encoding='utf-8') as f:
                text_json = json.load(f)

            for count_of_dishes in range(len(text_json) - 1):
                limit += 1
                random_dish = random.randint(0, len(text_json) - 1)
                markup_dishes_of_the_selected_country_dishes.add(
                    types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                markup_for_copy.add(
                    types.KeyboardButton("üçΩ " + text_json[random_dish]['name']))
                if limit > 120:
                    break
            markup_dishes_of_the_selected_country_dishes.add(types.KeyboardButton('üîô –ùa–∑a–¥'))
            markup_for_copy.add(types.KeyboardButton('üîô –ùa–∑a–¥'))
            dict_users_last_list_of_dishes[str(message.chat.id)] = markup_for_copy
            bot.send_message(message.chat.id,
                             f'ü•ò –ü–æ –∑–∞–ø—Ä–æ—Å—É "–ö—É—Ö–Ω—è: {message.text}" –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞–¥—Ü–∞—Ç—å –±–ª—é–¥',
                             reply_markup=markup_dishes_of_the_selected_country_dishes)

        else:
            markup_for_similar_dishes = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            dish = message.text
            dish = dish[0].upper() + dish[1:]
            dir_name = 'countries_cuisine'
            countries = os.listdir(dir_name)
            categories = os.listdir('categories_cuisine')
            find_anything = False
            limit = 0

            for country in countries:
                with open(f'countries_cuisine/{country}', 'r', encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json)):
                    if text_json[count_of_dishes]['name'].find(dish) != -1:
                        if limit > 120:
                            break
                        markup_for_similar_dishes.add(types.KeyboardButton("üçΩ " + text_json[count_of_dishes]['name']))
                        find_anything = True
                        limit += 1
                if limit > 120:
                    break

            for category in categories:
                with open(f'categories_cuisine/{category}', 'r', encoding='utf-8') as f:
                    text_json = json.load(f)

                for count_of_dishes in range(len(text_json)):
                    if text_json[count_of_dishes]['name'].find(dish) != -1:
                        if limit > 120:
                            break
                        markup_for_similar_dishes.add(
                            types.KeyboardButton("üçΩ " + text_json[count_of_dishes]['name']))
                        find_anything = True
                        limit += 1
                if limit > 120:
                    break

            if find_anything == True:
                markup_for_similar_dishes.add(types.KeyboardButton('üîô –ùa–∑a–¥'))
                dict_users_last_list_of_dishes[str(message.chat.id)] = markup_for_similar_dishes
                bot.send_message(message.chat.id, '‚úÖ –ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ –±–ª—é–¥–∞:',
                                 reply_markup=markup_for_similar_dishes)
            else:
                bot.send_message(message.chat.id, '‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')


def user_gender(message):
    if message.text == "üôã‚Äç‚ôÇÔ∏è –ú—É–∂—Å–∫–æ–π" or message.text == "üôã‚Äç‚ôÄÔ∏è –ñ–µ–Ω—Å–∫–∏–π":
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö')
        mass = []
        mass.append(message.text[5:])
        dict_of_users_param[str(message.chat.id)] = mass
        del mass
        bot.register_next_step_handler(msg, user_height)
    elif message.text == "/help":
        del dict_of_users_param[str(message.chat.id)]
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=return_markup_for_help())
    else:
        msg = bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –ø–æ–ª')
        bot.register_next_step_handler(msg, user_gender)


def user_height(message):
    if message.text.isdigit():
        if int(message.text) > 66 and int(message.text) < 273:
            msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å')
            dict_of_users_param.get(str(message.chat.id)).append(int(message.text))
            bot.register_next_step_handler(msg, user_weight)
        else:
            msg = bot.send_message(message.chat.id, '‚ùå –ù–µ –¥—É–º–∞—é, —á—Ç–æ –≤—ã —Ç–∞–∫–æ–≥–æ —Ä–æ—Å—Ç–∞ üòâ\n –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, user_height)
    elif message.text == "/help":
        del dict_of_users_param[message.chat.id]
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=return_markup_for_help())
    else:
        msg = bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω —Ä–æ—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, user_height)


def user_weight(message):
    if message.text.isdigit():
        if int(message.text) > 1 and int(message.text) < 545:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
            dict_of_users_param.get(str(message.chat.id)).append(int(message.text))
            bot.register_next_step_handler(msg, user_age)
        else:
            msg = bot.send_message(message.chat.id, '‚ùå –ù–µ –¥—É–º–∞—é, —á—Ç–æ –≤—ã —Å—Ç–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç–µ üòâ\n –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, user_weight())
    elif message.text == "/help":
        del dict_of_users_param[str(message.chat.id)]
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=return_markup_for_help())
    else:
        msg = bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–µ—Å, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, user_weight)


def user_age(message):
    if message.text.isdigit():
        if int(message.text) > 0 and int(message.text) < 100:
            markup_activity = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            markup_activity.add(types.KeyboardButton('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å'), types.KeyboardButton('–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å'),
                                types.KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å'), types.KeyboardButton('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å'),
                                types.KeyboardButton('–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π'))
            msg = bot.send_message(message.chat.id,
                                   '<b>–°—Ç–µ–ø–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>: \n\t\t<b>1. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å</b>: –î–ª—è '
                                   '–º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã—Ö –ª—é–¥–µ–π, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–∞–ª–æ –∏–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\t\t '
                                   '<b>2. –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å</b>: –î–ª—è –ª—é–¥–µ–π —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 '
                                   '—Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ –≤ –≤–∏–¥–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\t\t '
                                   '<b>3. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å</b>: –î–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π: —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π '
                                   '—Ç—è–∂–µ—Å—Ç–∏ –∏–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é.\n\t\t '
                                   '<b>4. –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å</b>: –î–ª—è –æ—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π: —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–ª–Ω—ã–π '
                                   '–¥–µ–Ω—å –∏–ª–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é.\n\t\t '
                                   '<b>5. –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π</b>: –î–ª—è –ø—Ä–µ–¥–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π: —Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ '
                                   '–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–∑–∞–Ω—è—Ç–∏—è —Å–ø–æ—Ä—Ç–æ–º.',
                                   reply_markup=markup_activity, parse_mode='html')
            dict_of_users_param.get(str(message.chat.id)).append(int(message.text))
            bot.register_next_step_handler(msg, activity_level)
        else:
            msg = bot.send_message(message.chat.id, '‚ùå –ù–µ –¥—É–º–∞—é, —á—Ç–æ –≤–∞–º —Å—Ç–æ–ª—å–∫–æ –ª–µ—Ç üòâ\n –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(msg, user_age)
    elif message.text == "/help":
        del dict_of_users_param[str(message.chat.id)]
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=return_markup_for_help())
    else:
        msg = bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –≤–æ–∑—Ä–∞—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, user_age)


def activity_level(message):
    if message.text in ACTIVITY_LEVELS:
        dict_of_users_param.get(str(message.chat.id)).append(ACTIVITY_LEVELS.get(message.text))
        print(dict_of_users_param.get(str(message.chat.id)))
        if dict_of_users_param.get(str(message.chat.id))[0] == "–ú—É–∂—Å–∫–æ–π":
            basal_metabolism = dict_of_users_param.get(str(message.chat.id))[4] * (
                    9.99 * dict_of_users_param.get(str(message.chat.id))[2] + 6.25 *
                    dict_of_users_param.get(str(message.chat.id))[1] - 4.92 *
                    dict_of_users_param.get(str(message.chat.id))[3] + 5)
        else:
            basal_metabolism = dict_of_users_param.get(str(message.chat.id))[4] * (
                    9.99 * dict_of_users_param.get(str(message.chat.id))[2] + 6.25 *
                    dict_of_users_param.get(str(message.chat.id))[1] - 4.92 *
                    dict_of_users_param.get(str(message.chat.id))[3] - 161)
        basal_metabolism = round(basal_metabolism)
        basal_metabolism_for_send = f'<b>{round(basal_metabolism / (dict_of_users_param.get(str(message.chat.id))[4]))} –∫–∫–∞–ª/—Å—É—Ç–∫–∏</b>. –≠—Ç–æ –≤–∞—à <b>–±–∞–∑–æ–≤—ã–π –º–µ—Ç–∞–±–æ–ª–∏–∑–º</b> (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω). –≠—Ç–æ –∫–∞–ª–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∂–∏–≥–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–∫–æ–µ, –∏ —ç–Ω–µ—Ä–≥–∏—è —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥—ã—Ö–∞–Ω–∏—è, –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ–ª–∞ –∏ —Ç.–¥. '
        normal_calories_for_send = f'<b>{basal_metabolism} –∫–∫–∞–ª/—Å—É—Ç–∫–∏</b>. –í–∞—à–∞ <b>–Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π</b> –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–µ—Å–∞ —Å —Ç–µ–∫—É—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã –Ω–µ —Ö—É–¥–µ–µ—Ç–µ –∏ –Ω–µ –Ω–∞–±–∏—Ä–∞–µ—Ç–µ –≤–µ—Å)'
        dict_of_users_param.get(str(message.chat.id)).append(
            round(basal_metabolism / (dict_of_users_param.get(str(message.chat.id))[4])))
        dict_of_users_param.get(str(message.chat.id)).append(basal_metabolism)
        add_paramaters_at_json(dict_of_users_param)
        bot.send_message(message.chat.id, basal_metabolism_for_send, parse_mode='html')
        bot.send_message(message.chat.id, normal_calories_for_send, parse_mode='html',
                         reply_markup=return_markup_for_help())


    elif message.text == "/help":
        del dict_of_users_param[str(message.chat.id)]
        bot.send_message(message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=return_markup_for_help())
    else:
        msg = bot.send_message(message.chat.id, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(msg, activity_level)


def add_paramaters_at_json(dict):
    with open('users_param.json', 'w+', encoding='utf-8') as file:
        json.dump(dict, file, indent=4, ensure_ascii=False)


def add_ingredient(message):
    markup_find_dishes = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    list_of_dishes = []
    ingredients = message.text.split(",")
    for i in range(0, len(ingredients)):
        if ingredients[i][0] == " ":
            ingredients[i] = ingredients[i][1:]
        elif ingredients[i][len(ingredients[i]) - 1] == " ":
            ingredients[i] = ingredients[i][0:len(ingredients[i]) - 1]
        ingredients[i] = ingredients[i].lower()
    dict_of_users_ingredients[str(message.chat.id)] = ingredients
    countries = os.listdir('countries_cuisine')
    categories = os.listdir('categories_cuisine')
    mass_of_ingredients = []
    find_it = False
    print(ingredients)

    for country in countries:
        with open(f'countries_cuisine/{country}', 'r', encoding='utf-8') as f:
            text_json = json.load(f)

        for dishes in text_json:
            for all_ingredients in dishes['ingredients']:
                mass_of_ingredients.append(all_ingredients[0].lower())
            coincidence = 0
            for ingredient in dict_of_users_ingredients.get(str(message.chat.id)):
                if find_it:
                    find_it = False
                    break
                for ingredient_of_dishes in mass_of_ingredients:
                    if ingredient.lower() in ingredient_of_dishes.lower():
                        coincidence += 1
                        if coincidence == len(dict_of_users_ingredients.get(str(message.chat.id))):
                            list_of_dishes.append("üçΩ " + dishes['name'])
                            find_it = True
                        break
            mass_of_ingredients = []

    mass_of_ingredients = []
    find_it = False

    for category in categories:
        with open(f'categories_cuisine/{category}', 'r', encoding='utf-8') as f:
            text_json = json.load(f)

        for dishes in text_json:
            for all_ingredients in dishes['ingredients']:
                mass_of_ingredients.append(all_ingredients[0].lower())
            coincidence = 0
            for ingredient in dict_of_users_ingredients.get(str(message.chat.id)):
                if find_it:
                    find_it = False
                    break
                for ingredient_of_dishes in mass_of_ingredients:
                    if ingredient.lower() in ingredient_of_dishes.lower():
                        coincidence += 1
                        if coincidence == len(dict_of_users_ingredients.get(str(message.chat.id))):
                            list_of_dishes.append("üçΩ " + dishes['name'])
                            find_it = True
                        break
            mass_of_ingredients = []

    list_of_dishes = list(set(list_of_dishes))
    print(list_of_dishes)

    if list_of_dishes != []:
        for _ in range(0, 115):
            if list_of_dishes == []:
                break
            random_dish = random.choice(list_of_dishes)
            markup_find_dishes.add(types.KeyboardButton(random_dish))
            list_of_dishes.remove(random_dish)

        markup_find_dishes.add(types.KeyboardButton("üîô –ùa–∑a–¥"))
        dict_users_last_list_of_dishes[str(message.chat.id)] = markup_find_dishes
        bot.send_message(message.chat.id, '‚úÖ –ù–∞—à–µ–ª —Å–ª–µ–¥—É—é—â–∏–µ –±–ª—é–¥–∞', reply_markup=markup_find_dishes)
    else:
        bot.send_message(message.chat.id, '‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª')


def return_markup_for_help():
    markup_for_help = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('ü•ò –ì–æ—Ç–æ–≤–∫–∞ –±–ª—é–¥')
    item2 = types.KeyboardButton('üìñ –î–Ω–µ–≤–Ω–∏–∫ –∫–∞–ª–æ—Ä–∏–π')
    item3 = types.KeyboardButton('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞')
    markup_for_help.add(item1, item2, item3)
    return markup_for_help


def return_markup_for_cooking():
    markup_for_cooking_dishes = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üç¥ –ü–æ–∏—Å–∫ –±–ª—é–¥–∞')
    item2 = types.KeyboardButton('üó∫ –ö—É—Ö–Ω–∏ –º–∏—Ä–∞')
    item3 = types.KeyboardButton('üç≥ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥')
    item4 = types.KeyboardButton('üßÑ –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º')
    item5 = types.KeyboardButton('üîô –ù–∞–∑–∞–¥')
    markup_for_cooking_dishes.add(item1, item2, item3, item4, item5)
    return markup_for_cooking_dishes


def return_markup_for_kitchens_wolrd():
    markup_for_world_kitchens = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('üáπüá≠ –¢–∞–π–ª–∞–Ω–¥')
    item2 = types.KeyboardButton('üáπüá∑ –¢—É—Ä—Ü–∏—è')
    item3 = types.KeyboardButton('üáÆüá≥ –ò–Ω–¥–∏—è')
    item4 = types.KeyboardButton('üáØüáµ –Ø–ø–æ–Ω–∏—è')
    item5 = types.KeyboardButton('üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è')
    item6 = types.KeyboardButton('üá™üá∏ –ò—Å–ø–∞–Ω–∏—è')
    item7 = types.KeyboardButton('üáÆüáπ –ò—Ç–∞–ª–∏—è')
    item8 = types.KeyboardButton('üá®üá≥ –ö–∏—Ç–∞–π')
    item9 = types.KeyboardButton('üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞')
    item10 = types.KeyboardButton('üáÆüá© –ò–Ω–¥–æ–Ω–µ–∑–∏—è')
    item11 = types.KeyboardButton('üîô –ùa–∑a–¥')
    markup_for_world_kitchens.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11)
    return markup_for_world_kitchens


def return_markup_for_categories():
    markup_for_categories = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('ü•ê –í—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ã')
    item2 = types.KeyboardButton('üç≤ –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞')
    item3 = types.KeyboardButton('üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏')
    item4 = types.KeyboardButton('ü•ó –°–∞–ª–∞—Ç—ã')
    item5 = types.KeyboardButton('ü•£ –°—É–ø—ã')
    item6 = types.KeyboardButton('üçù –ü–∞—Å—Ç–∞ –∏ –ø–∏—Ü—Ü–∞')
    item7 = types.KeyboardButton('ü•™ –°—ç–Ω–¥–≤–∏—á–∏')
    item8 = types.KeyboardButton('ü•§ –ù–∞–ø–∏—Ç–∫–∏')
    item9 = types.KeyboardButton('üîô –ùa–∑a–¥')
    markup_for_categories.add(item1, item2, item3, item4, item5, item6, item7, item8, item9)
    return markup_for_categories


def check_users_activity(id):
    if not os.path.isdir('activity'):
        os.mkdir('activity')
    if not os.path.exists(f'activity/{now.date()}.txt'):
        f = open(f'activity/{now.date()}.txt', 'x')
        f.close()
    with open(f'activity/{now.date()}.txt', 'r+', encoding='utf-8') as file:
        info = file.read()
        if not (str(id) in info):
            file.write(f"{id}\n")


bot.infinity_polling()
